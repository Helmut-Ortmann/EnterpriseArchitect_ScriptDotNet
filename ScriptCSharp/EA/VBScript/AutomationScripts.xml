<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNet"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{38825248-2CA7-4ef3-BB59-133C246D0FBC}"/>
			<Column name="ScriptAuthor" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RunCommandVb&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'option explicit&#xA;'&#xA;' See:&#xA;' GitHub: Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;' - https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;' SPARX Webinar Hybrid Scripting&#xA;' - http://www.sparxsystems.com/resources/webinar/release/ea13/videos/hybrid-scripting.html&#xA;' SPARX Tutorial Hyper Script&#xA;' http://www.sparxsystems.com/resources/user-guides/automation/hybrid-scripting.pdf&#xA;&#xA;' Geert Bellekens Tutorial to use VB Script Library: &#xA;' https://bellekens.com/2015/12/27/how-to-use-the-enterprise-architect-vbscript-library/&#xA;'[path=\Framework\ho\run]&#xA;'[group=HybridScripting]&#xA;&#xA;'--------------------------------------------------------------&#xA;' RunCommand&#xA;' Runs the passed *.exe file and returns the Standard Output&#xA;' &#xA;' Signiture:&#xA;' result = RunCommand(command, parameter1, parameter2 parameter3)&#xA;'&#xA;' Description:&#xA;' - Estimates the own Process ID&#xA;' - Runs the designated *.exe file&#xA;' - Reads the Standard Output and returns it to the caller&#xA;'&#xA;' Improvements:&#xA;' - Use Windows %PATH% Environment Variable&#xA;' - Make a fix location structure for your Scripts&#xA;' - Use local path&#xA;' - Your ideas&#xA;' - ..&#xA;'&#xA;' Let me know about your experiences, improvements and suggestions&#xA;' Helmut.Ortmann@t-Online.de&#xA;'&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Testfunction: &#xA;' - Use it to test and get a basic understanding. At the end of this file you can switch the call of this Test Function on or off.&#xA;'   To do this insert or delete the apostrophe (Last line of this file/script)&#xA;sub Test&#xA;	Dim process, result&#xA;	process = ProcessId(&quot;EA.exe&quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;ProcessId('EA.exe')&quot; &amp; vbCRLF&#xA;	Session.Output process&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	' Test Run(..,..)&#xA;	result = Run(&quot;ping&quot;, &quot;127.0.0.1&quot;, &quot; &quot;, &quot; &quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;Run('ping', '127.0.0.1', ' ', ' ')&quot; &amp; vbCRLF&#xA;	Session.Output result&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output vbCRLF &amp; vbCRLF &amp; vbCRLF&#xA;	' Test RunEA(..,..)&#xA;	result = RunEA(&quot;ping&quot;, &quot;&quot;, &quot; &quot;)&#xA;	Session.Output &quot;RunEA(), Result ping:&quot; &amp; vbCRLF &amp; result&#xA;end sub&#xA;&#xA;'---------------------------------------------------------------------------------------------------------------------------------&#xA;' Testfunction: &#xA;' - Use it to test and get a basic understanding. At the end of this file you can switch the call of this Test Function on or off.&#xA;'   To do this insert or delete the apostrophe (Last line of this file/script)&#xA;sub TestJava&#xA;	Dim process, result&#xA;	process = ProcessId(&quot;EA.exe&quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;ProcessId('EA.exe')&quot; &amp; vbCRLF&#xA;	Session.Output process&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	' Test RunJava(..,..)&#xA;	result = RunCommandJava(&quot;c:\temp\java&quot;, &quot;SparxSystems.RepositoryInterface&quot;, &quot; &quot;, &quot; &quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;RunJava 'c:\temp\java', 'SparxSystems.RepositoryInterface', ' ', ' ')&quot; &amp; vbCRLF&#xA;	Session.Output result&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output vbCRLF &amp; vbCRLF &amp; vbCRLF&#xA;end sub&#xA;&#xA;&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Function to call an arbitrary *.exe and return the Standard Output to the caller&#xA;'&#xA;' Parameters:&#xA;' - CommandExe   The *.exe file to call&#xA;' - param1       Your parameter 1 you want to pass to the exe&#xA;' - param2       Your parameter 2 you want to pass to the exe&#xA;' - Return Value The Standard Output of the called *.exe&#xA;'&#xA;' Your *.exe:    Get the EA Repository by the Process ID of the EA Instance&#xA;' - para1        The ProcessID of the EA Instance&#xA;' - para2        param1 &#xA;' - para3        param2 &#xA;Function RunCommand(CommandExe, param1, param2)&#xA;    RunCommand = Run(CommandExe, ProcessId(&quot;EA.exe&quot;), param1, param2)&#xA;End Function&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Function to call an Java Class and returns the Standard Output to the caller&#xA;'&#xA;' Parameters:&#xA;' - CommandExe   The *.exe file to call&#xA;' - param1       Your parameter 1 you want to pass to the exe&#xA;' - param2       Your parameter 2 you want to pass to the exe&#xA;' - Return Value The Standard Output of the called *.exe&#xA;'&#xA;' Your Java Class:    Get the EA Repository by the Process ID of the EA Instance&#xA;' - para1             The ProcessID of the EA Instance&#xA;' - para2             param1 &#xA;' - para3             param2 &#xA;Function RunCommandJava(baseFolder, eaClass, param1, param2)&#xA;    RunCommandJava = RunJava(baseFolder, eaClass, ProcessId(&quot;EA.exe&quot;), param1, param2)&#xA;End Function&#xA;&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Helper to get the Process ID of the own process&#xA;Function ProcessId(strScriptName)&#xA;	Dim datHighest&#xA;	Dim lngMyProcessId&#xA;	Dim WMI, wql&#xA;	Dim objProcess&#xA;	'Initialise &#xA;	datHighest = Cdbl(0)&#xA;	lngMyProcessId = 0&#xA;&#xA;	Set WMI = GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)&#xA;	wql = &quot;SELECT * FROM Win32_Process WHERE Name = '&quot; &amp; strScriptName &amp; &quot;'&quot;&#xA;	'&#xA;	For Each objProcess In WMI.ExecQuery(wql)&#xA;	  'The next If is not necessary, it only restricts the search to all processes on the current VB Script&#xA;	  'If Instr(objProcess.CommandLine, WScript.ScriptName) &lt;&gt; 0 Then&#xA;		If objProcess.CreationDate &gt; datHighest Then&#xA;		  'Take the process with the highest CreationDate so far&#xA;		  '  e.g. 20160406121130.510941+120   i.e. 2016-04-06 12h11m:30s and fraction&#xA;		  datHighest = objProcess.CreationDate&#xA;		  lngMyProcessId = objProcess.ProcessId&#xA;		End If&#xA;	  'End If&#xA;	Next&#xA;	ProcessId = lngMyProcessId&#xA;End Function&#xA;&#xA;'-----------------------------------------------------&#xA;' Helper function to run an *.exe with 3 parameters&#xA;' Tested with C# in a Hybrid SPARX Environment &#xA;' It reads the Standard Output and returns it as the result&#xA;'&#xA;' CommandExe:  Full path of the C# exe according to SPARX&#xA;' param1:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param2:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param3:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;Function Run(CommandExe,param1,param2, param3) &#xA;    Dim ws,wsShellExe, Command&#xA;	Dim stdOut ' Standard output&#xA;	Dim stdErr ' Error output&#xA;	Const WshFinished = 1&#xA;    Const WshFailed = 2&#xA;	&#xA;    Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;    ' make sure the path may contain spaces&#xA;    ' use '&quot;' to wrap opath string	&#xA;	'http://www.vbsedit.com/html/5593b353-ef4b-4c99-8ae1-f963bac48929.asp&#xA;	&#xA;	' Expand environment variables&#xA;	commandExe = ws.ExpandEnvironmentStrings(CommandExe)&#xA;    command = CommandExe &amp;&quot; &quot;&amp; param1 &amp;&quot; &quot;&amp;param2&amp;&quot; &quot;&amp;param3&amp;&quot; &quot; &#xA;	On Error Resume Next&#xA;    Set wsShellExe = ws.Exec(command)&#xA;	If Err.Number &lt;&gt; 0 Then&#xA;	  MsgBox &quot;Command:'&quot;  &amp; vbCRLF &amp; command &amp; _&#xA;     	  &quot;'&quot; &amp; vbCRLF &amp; &quot;Error:&quot; &amp; Err.Number &amp; _&#xA;		  vbCRLF &amp; &quot;Source:&quot; &amp; Err.Source &amp; _&#xA;		  vbCRLF &amp; &quot;Description:&quot; &amp; Err.Description, _&#xA;		  65, _&#xA;		  &quot;Error running command&quot;&#xA;	  return&#xA;	End If&#xA;	On Error Goto 0&#xA;&#xA;	stdErr = wsShellExe.StdErr.ReadAll&#xA;	&#xA;	Select Case wsShellExe.Status&#xA;      Case WshFinished&#xA;		 'Session.Output &quot;WshFinished&quot;&#xA;		 stdOut = wsShellExe.StdOut.ReadAll&#xA;      Case WshFailed&#xA;         'strOutput = wsShellExe.StdErr.ReadAll&#xA;		 Session.Output &quot;WshEnd&quot;&#xA;	  Case Else&#xA;	     'Session.Output &quot;Error&quot;&#xA;		 stdOut = &quot;Undefined Error!&quot;&#xA;    End Select&#xA;    Run = stdOut&#xA;End Function&#xA;&#xA;&#xA;'-----------------------------------------------------&#xA;' Helper function to run Java Class with 2 parameters&#xA;' Tested with java in a Hybrid SPARX Environment &#xA;' It reads the Standard Output and returns it as the result&#xA;' Note: Build has run&#xA;'       java is in path&#xA;'&#xA;' baseFolder:   Full path of the C# exe according to SPARX&#xA;' eaClass:     e.g.: SparxSystems.RepositoryInterface&#xA;' param1:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param2:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param3:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;'&#xA;' baseFolder\&#xA;'           \eaapi.jar&#xA;'           \SSJavaCOM.dll&#xA;'           \SparxSystems\&#xA;'                        \... your Java classes&#xA;Function RunJava(baseFolder, eaClass, param1, param2, param3)&#xA;    Dim ws,wsShellExe, Command&#xA;    Dim objEnv&#xA;	Dim stdOut ' Standard output&#xA;	Dim stdErr ' Error output&#xA;	Const WshFinished = 1&#xA;    Const WshFailed = 2&#xA;	&#xA;&#xA;    ' Set environment variable&#xA;	Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;    Set objEnv = ws.Environment (&quot;PROCESS&quot;)&#xA;    objEnv(&quot;PATH&quot;) = objEnv(&quot;PATH&quot;) &amp; &quot;;&quot; &amp; baseFolder&#xA;	&#xA;	' Set current folder&#xA;	ws.CurrentDirectory = baseFolder&#xA;    Session.Output ws.CurrentDirectory&#xA;&#xA;&#xA;    Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;    command = &quot;java -cp &quot;&quot;eaapi.jar;.;&quot;&quot; &quot; &amp; eaClass &amp;&quot; &quot;&amp; param1 &amp;&quot; &quot;&amp;param2&amp;&quot; &quot;&amp;param3&amp;&quot; &quot; &#xA;    Session.Output &quot;Command=&quot; &amp; &quot;'&quot; &amp; command &amp; &quot;'&quot;&#xA;    Session.Output objEnv(&quot;PATH&quot;)&#xA;    On Error Resume Next&#xA;    Set wsShellExe = ws.Exec(command)&#xA;	If Err.Number &lt;&gt; 0 Then&#xA;	  MsgBox &quot;Command:'&quot;  &amp; vbCRLF &amp; command &amp; _&#xA;     	  &quot;'&quot; &amp; vbCRLF &amp; &quot;Error:&quot; &amp; Err.Number &amp; _&#xA;		  vbCRLF &amp; &quot;Source:&quot; &amp; Err.Source &amp; _&#xA;		  vbCRLF &amp; &quot;Description:&quot; &amp; Err.Description, _&#xA;		  65, _&#xA;		  &quot;Error running command&quot;&#xA;	  return&#xA;	End If&#xA;	On Error Goto 0&#xA;&#xA;	stdErr = wsShellExe.StdErr.ReadAll&#xA;	&#xA;	Select Case wsShellExe.Status&#xA;      Case WshFinished&#xA;		 'Session.Output &quot;WshFinished&quot;&#xA;		 stdOut = wsShellExe.StdOut.ReadAll&#xA;      Case WshFailed&#xA;         'strOutput = wsShellExe.StdErr.ReadAll&#xA;		 Session.Output &quot;WshEnd&quot;&#xA;	  Case Else&#xA;	     'Session.Output &quot;Error&quot;&#xA;		 stdOut = &quot;Undefined Error!&quot;&#xA;    End Select&#xA;    RunJava = stdOut &#xA; End Function&#xA;&#xA;'-----------------------------------------------------------&#xA;' Test      Execute C# EA HyperScripting from EA Script GUI&#xA;' TestJava  Execute Java EA HyperScripting from EA Script GUI&#xA;'&#xA;' To use or not use this test functionality remove/insert beneath apostrophe before 'Test' or 'TestJava'&#xA;'&#xA;'Test&#xA;'TestJava"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8853B706-2FA8-4aaf-9620-C4A4E6557FDD}"/>
			<Column name="ScriptAuthor" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RunCommandVbTest&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;' See:&#xA;' SPARX Webinar Hybrid Scripting&#xA;' - http://www.sparxsystems.com/resources/webinar/release/ea13/videos/hybrid-scripting.html&#xA;' SPARX Tutorial Hyper Script&#xA;' http://www.sparxsystems.com/resources/user-guides/automation/hybrid-scripting.pdf&#xA;' Geert Bellekens Tutorial: &#xA;' https://bellekens.com/2015/12/27/how-to-use-the-enterprise-architect-vbscript-library/&#xA;'[path=\Framework\ho\run]&#xA;'[group=HybridScripting]&#xA;'-------------------------------------------------&#xA;' RunCommandTest&#xA;'&#xA;' Runs a Windows Console Application (*.exe) in the script environment&#xA;' It's a convenient way to make Script by compiled languages.&#xA;' EA supports this under the name 'HyperScript'. There is a whole development environment inside EA&#xA;' EA Hyperscript supports languages like &quot;JAVA&quot;, &quot;C#&quot;.&#xA;'&#xA;' How it's working:&#xA;' - Develop your console application according to EA examples&#xA;' -- Deploy the *.exe and this file&#xA;' - Consider using the Windows %PATH$ variable to easily access the console application (no need to use the whole path)&#xA;' - Adapt this example to your needs&#xA;' - Run&#xA;'&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC HybridScripting.RunCommand&#xA;&#xA;sub main&#xA;    Dim result&#xA;	Dim script&#xA;	' Example:&#xA;	script = &quot;c:\Temp\EaScripts\HybridScriptingAdvanced.exe&quot;&#xA;	command = &quot;DoTask1&quot;&#xA;	guid = &quot;{7D66FD56-A156-4e72-8504-AC50CEEA8C92}&quot;&#xA;	' Debug&#xA;	'script = &quot;c:\hoData\Development\GitHub\EnterpriseArchitect_hoTools\HybridScriptingAdvanced\bin\Debug\HybridScriptingAdvanced.exe&quot;&#xA;	result = RunCommand(script, command, guid)&#xA;	&#xA;	Session.Output vbCRLF &amp; vbCRLF &amp; vbCRLF &#xA;	Session.Output &quot;------------------------------------------------&quot;&#xA;    Session.Output &quot;RunCommand(script.exe, command, guid), Return value:&quot; &amp; vbCRLF &amp; result&#xA;	Session.Output &quot;------------------------------------------------&quot;&#xA;	&#xA;	MsgBox &quot;Command:'&quot;  &amp; vbCRLF &amp; script &amp; _&#xA;     	  &quot;'&quot; &amp; vbCRLF &amp; vbCRLF &amp; _&#xA;		  &quot;first 10000 characters of return&quot; &amp; _&#xA;		  vbCRLF &amp; &quot;'&quot; &amp; _&#xA;		  Mid(result,1,10000) &amp; &quot;'&quot; &amp; vbCRLF, _&#xA;    	  65, _&#xA;		  &quot;Command run!&quot;&#xA;end sub&#xA;&#xA;'-------------------------------------------------------&#xA;' main   Runs the command&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{C67BBA63-8B2B-4f08-819D-3DF7298C3097}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetBrowser"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{EC1418B2-432A-43e9-A047-12F30DD09BAB}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetDiagram"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{433BDA91-7F89-41f3-87B3-AA4098690715}"/>
			<Column name="ScriptAuthor" value="{C67BBA63-8B2B-4f08-819D-3DF7298C3097}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TraversePackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name: TraversePackage&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	' Get the type of element selected in the Project Browser&#xA;	dim treeSelectedType&#xA;	treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;	&#xA;	' Handling Code: Uncomment any types you wish this script to support&#xA;	' NOTE: You can toggle comments on multiple lines that are currently&#xA;	' selected with [CTRL]+[SHIFT]+[C].&#xA;	select case treeSelectedType&#xA;	&#xA;'		case otElement&#xA;'			' Code for when an element is selected&#xA;'			dim theElement as EA.Element&#xA;'			set theElement = Repository.GetTreeSelectedObject()&#xA;'					&#xA;		case otPackage&#xA;			' Code for when a package is selected&#xA;	        ' Run the CSharp script&#xA;		    ' Command: &quot;ListDiagramElements&quot;&#xA;		    ' Par1:    Package GUID&#xA;			dim thePackage as EA.Package&#xA;			set thePackage = Repository.GetTreeSelectedObject()&#xA;			runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TraversePackage&quot;, thePackage.PackageGUID&#xA;			&#xA;'			&#xA;'		case otDiagram&#xA;'			' Code for when a diagram is selected&#xA;'			dim theDiagram as EA.Diagram&#xA;'			set theDiagram = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otAttribute&#xA;'			' Code for when an attribute is selected&#xA;'			dim theAttribute as EA.Attribute&#xA;'			set theAttribute = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otMethod&#xA;'			' Code for when a method is selected&#xA;'			dim theMethod as EA.Method&#xA;'			set theMethod = Repository.GetTreeSelectedObject()&#xA;		&#xA;		case else&#xA;			' Error message&#xA;			Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;			&#xA;	end select&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{55BD0E3B-6543-485f-AD3D-2A191E33B3C9}"/>
			<Column name="ScriptAuthor" value="{EC1418B2-432A-43e9-A047-12F30DD09BAB}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ListDiagramElements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' This code has been included from the default Diagram Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.&#xA;'&#xA;' Script Name: ListDiagramElements&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;	' Get a reference to the current diagram&#xA;	dim currentDiagram as EA.Diagram&#xA;	set currentDiagram = Repository.GetCurrentDiagram()&#xA;	&#xA;	if not currentDiagram is nothing then &#xA;	    ' Run the CSharp script&#xA;		' Command: &quot;ListDiagramElements&quot;&#xA;		' Par1:    Diagram GUID&#xA;		runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;ListDiagramElements&quot;, currentDiagram.DiagramGUID&#xA;	&#xA;		' Get a reference to any selected connector/objects&#xA;		dim selectedConnector as EA.Connector&#xA;		dim selectedObjects as EA.Collection&#xA;		set selectedConnector = currentDiagram.SelectedConnector&#xA;		set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;		if not selectedConnector is nothing then&#xA;			' A connector is selected&#xA;		elseif selectedObjects.Count &gt; 0 then&#xA;			' One or more diagram objects are selected&#xA;		else&#xA;			' Nothing is selected&#xA;		end if&#xA;	else&#xA;		Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;	end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
	</DataSet>
</RefData>

<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNet"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{38825248-2CA7-4ef3-BB59-133C246D0FBC}"/>
			<Column name="ScriptAuthor" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RunCommandVb&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="'option explicit&#xA;'&#xA;' See:&#xA;' GitHub: Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;' - https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;' SPARX Webinar Hybrid Scripting&#xA;' - http://www.sparxsystems.com/resources/webinar/release/ea13/videos/hybrid-scripting.html&#xA;' SPARX Tutorial Hyper Script&#xA;' http://www.sparxsystems.com/resources/user-guides/automation/hybrid-scripting.pdf&#xA;&#xA;' Geert Bellekens Tutorial to use VB Script Library: &#xA;' https://bellekens.com/2015/12/27/how-to-use-the-enterprise-architect-vbscript-library/&#xA;'[path=\Framework\ho\run]&#xA;'[group=HybridScripting]&#xA;&#xA;'--------------------------------------------------------------&#xA;' RunCommand&#xA;' Runs the passed *.exe file and returns the Standard Output&#xA;' &#xA;' Signiture:&#xA;' result = RunCommand(command, parameter1, parameter2 parameter3)&#xA;'&#xA;' Description:&#xA;' - Estimates the own Process ID&#xA;' - Runs the designated *.exe file&#xA;' - Reads the Standard Output and returns it to the caller&#xA;'&#xA;' Improvements:&#xA;' - Use Windows %PATH% Environment Variable&#xA;' - Make a fix location structure for your Scripts&#xA;' - Use local path&#xA;' - Your ideas&#xA;' - ..&#xA;'&#xA;' Let me know about your experiences, improvements and suggestions&#xA;' Helmut.Ortmann@t-Online.de&#xA;'&#xA;&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;&#xA;' Testfunction: &#xA;' - Use it to test and get a basic understanding. At the end of this file you can switch the call of this Test Function on or off.&#xA;'   To do this insert or delete the apostrophe (Last line of this file/script)&#xA;sub Test&#xA;	Dim process, result&#xA;	process = ProcessId(&quot;EA.exe&quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;ProcessId('EA.exe')&quot; &amp; vbCRLF&#xA;	Session.Output process&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	' Test Run(..,..)&#xA;	result = Run(&quot;ping&quot;, &quot;127.0.0.1&quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;Run('ping', '127.0.0.1', ' ', ' ', ' ')&quot; &amp; vbCRLF&#xA;	Session.Output result&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output vbCRLF &amp; vbCRLF &amp; vbCRLF&#xA;	' Test RunEA(..,..)&#xA;	result = RunEA(&quot;ping&quot;, &quot;&quot;, &quot; &quot;)&#xA;	Session.Output &quot;RunEA(), Result ping:&quot; &amp; vbCRLF &amp; result&#xA;end sub&#xA;&#xA;'---------------------------------------------------------------------------------------------------------------------------------&#xA;' Testfunction: &#xA;' - Use it to test and get a basic understanding. At the end of this file you can switch the call of this Test Function on or off.&#xA;'   To do this insert or delete the apostrophe (Last line of this file/script)&#xA;sub TestJava&#xA;	Dim process, result&#xA;	process = ProcessId(&quot;EA.exe&quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;ProcessId('EA.exe')&quot; &amp; vbCRLF&#xA;	Session.Output process&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	' Test RunJava(..,..)&#xA;	result = RunCommandJava(&quot;c:\temp\java&quot;, &quot;SparxSystems.RepositoryInterface&quot;, &quot; &quot;, &quot; &quot;,&quot; &quot;, &quot; &quot;)&#xA;	Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output &quot;RunJava 'c:\temp\java', 'SparxSystems.RepositoryInterface', ' ', ' ', ' ', ' ')&quot; &amp; vbCRLF&#xA;	Session.Output result&#xA;    Session.Output &quot;--------------------------------------------&quot;&#xA;	Session.Output vbCRLF &amp; vbCRLF &amp; vbCRLF&#xA;end sub&#xA;&#xA;&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Function to call an arbitrary *.exe and return the Standard Output to the caller&#xA;'&#xA;' Parameters:&#xA;' - CommandExe   The *.exe file to call&#xA;' - param1       Your parameter 1 you want to pass to the exe, usually the function to do, e.g. &quot;Find&quot;&#xA;' - param2       Your parameter 2 you want to pass to the exe, usually a guid to {.......}&#xA;' - param3       Your parameter 3 you want to pass to the exe&#xA;' - Return Value The Standard Output of the called *.exe&#xA;'&#xA;' Your *.exe:    Get the EA Repository by the Process ID of the EA Instance&#xA;' - prosessId    The ProcessID of the EA Instance&#xA;' - para1        param1, usually the thing to do (e.g. &quot;Print&quot;,&quot;ShowItem&quot;,&quot;SearchFor&quot;,..) &#xA;' - para2        param2 &#xA;' - para3        param3 &#xA;Function RunCommand(CommandExe, param1, param2, param3)&#xA;    RunCommand = Run(CommandExe, ProcessId(&quot;EA.exe&quot;), param1, param2, param3)&#xA;End Function&#xA;&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Function to call an Java Class and returns the Standard Output to the caller&#xA;'&#xA;' Parameters:&#xA;' - CommandExe   The Java Class to call&#xA;' - param1       Your parameter 1 you want to pass to the exe&#xA;' - param2       Your parameter 2 you want to pass to the exe&#xA;' - param3       Your parameter 3 you want to pass to the exe&#xA;' - Return Value The Standard Output of the called *.exe&#xA;'&#xA;' Your Java Class:    Get the EA Repository by the Process ID of the EA Instance&#xA;' - para1             The ProcessID of the EA Instance&#xA;' - para2             param1 &#xA;' - para3             param2 &#xA;' - para4             param3 &#xA;Function RunCommandJava(baseFolder, eaClass, param1, param2, param3, param4)&#xA;    RunCommandJava = RunJava(baseFolder, eaClass, ProcessId(&quot;EA.exe&quot;), param1, param2, param3)&#xA;End Function&#xA;&#xA;&#xA;'--------------------------------------------------------------------&#xA;' Helper to get the Process ID of the own process&#xA;Function ProcessId(strScriptName)&#xA;	Dim datHighest&#xA;	Dim lngMyProcessId&#xA;	Dim WMI, wql&#xA;	Dim objProcess&#xA;	'Initialise &#xA;	datHighest = Cdbl(0)&#xA;	lngMyProcessId = 0&#xA;&#xA;	Set WMI = GetObject(&quot;winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2&quot;)&#xA;	wql = &quot;SELECT * FROM Win32_Process WHERE Name = '&quot; &amp; strScriptName &amp; &quot;'&quot;&#xA;	'&#xA;	For Each objProcess In WMI.ExecQuery(wql)&#xA;	  'The next If is not necessary, it only restricts the search to all processes on the current VB Script&#xA;	  'If Instr(objProcess.CommandLine, WScript.ScriptName) &lt;&gt; 0 Then&#xA;		If objProcess.CreationDate &gt; datHighest Then&#xA;		  'Take the process with the highest CreationDate so far&#xA;		  '  e.g. 20160406121130.510941+120   i.e. 2016-04-06 12h11m:30s and fraction&#xA;		  datHighest = objProcess.CreationDate&#xA;		  lngMyProcessId = objProcess.ProcessId&#xA;		End If&#xA;	  'End If&#xA;	Next&#xA;	ProcessId = lngMyProcessId&#xA;End Function&#xA;&#xA;'-----------------------------------------------------&#xA;' Helper function to run an *.exe with 3 parameters&#xA;' Tested with C# in a Hybrid SPARX Environment &#xA;' It reads the Standard Output and returns it as the result&#xA;'&#xA;' CommandExe:  Full path of the C# exe according to SPARX&#xA;' param1:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param2:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param3:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param4:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;Function Run(CommandExe, pid, param1, param2, param3) &#xA;    Dim ws,wsShellExe, Command&#xA;	Dim stdOut ' Standard output&#xA;	Dim stdErr ' Error output&#xA;	Const WshFinished = 1&#xA;    Const WshFailed = 2&#xA;	&#xA;    Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;    ' make sure the path may contain spaces&#xA;    ' use '&quot;' to wrap opath string	&#xA;	'http://www.vbsedit.com/html/5593b353-ef4b-4c99-8ae1-f963bac48929.asp&#xA;	&#xA;	' Expand environment variables&#xA;	commandExe = ws.ExpandEnvironmentStrings(CommandExe)&#xA;    command = CommandExe &amp; &quot; &quot; &amp; pid &amp; &quot; &quot;&amp; param1 &amp; &quot; &quot; &amp; param2 &amp; &quot; &quot; &amp; param3 &amp; &quot; &quot; &#xA;	On Error Resume Next&#xA;    Set wsShellExe = ws.Exec(command)&#xA;	If Err.Number &lt;&gt; 0 Then&#xA;	  MsgBox &quot;Command:'&quot;  &amp; vbCRLF &amp; command &amp; _&#xA;     	  &quot;'&quot; &amp; vbCRLF &amp; &quot;Error:&quot; &amp; Err.Number &amp; _&#xA;		  vbCRLF &amp; &quot;Source:&quot; &amp; Err.Source &amp; _&#xA;		  vbCRLF &amp; &quot;Description:&quot; &amp; Err.Description, _&#xA;		  65, _&#xA;		  &quot;Error running command&quot;&#xA;		  stdOut = &quot;Undefined Error!&quot;&#xA;	  return&#xA;	End If&#xA;	On Error Goto 0&#xA;&#xA;    if IsObject(wsShellExe) Then&#xA;	  stdErr = wsShellExe.StdErr.ReadAll&#xA;	&#xA;		Select Case wsShellExe.Status&#xA;		  Case WshFinished&#xA;			 'Session.Output &quot;WshFinished&quot;&#xA;			 stdOut = wsShellExe.StdOut.ReadAll&#xA;		  Case WshFailed&#xA;			 'strOutput = wsShellExe.StdErr.ReadAll&#xA;			 Session.Output &quot;WshEnd&quot;&#xA;		  Case Else&#xA;			 'Session.Output &quot;Error&quot;&#xA;			 stdOut = &quot;Undefined Error!&quot;&#xA;		End Select&#xA;	End If&#xA;    Run = stdOut&#xA;End Function&#xA;&#xA;&#xA;'-----------------------------------------------------&#xA;' Helper function to run Java Class with 3 parameters&#xA;' Tested with java in a Hybrid SPARX Environment &#xA;' It reads the Standard Output and returns it as the result&#xA;' Note: Build has run&#xA;'       java sdk 32 bit (bin folder) is in path&#xA;'&#xA;' baseFolder:   Full path of the C# exe according to SPARX&#xA;' eaClass:     e.g.: SparxSystems.RepositoryInterface&#xA;' param1:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param2:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param3:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;' param4:      Value parameter you want to pass to CommandExe (no references, objects)&#xA;'&#xA;' baseFolder\&#xA;'           \eaapi.jar&#xA;'           \SSJavaCOM.dll&#xA;'           \SparxSystems\&#xA;'                        \... your Java classes&#xA;Function RunJava(baseFolder, eaClass, param1, param2, param3, param4)&#xA;    Dim ws,wsShellExe, Command, Java32Path&#xA;    Dim objEnv&#xA;	Dim stdOut ' Standard output&#xA;	Dim stdErr ' Error output&#xA;	Const WshFinished = 1&#xA;    Const WshFailed = 2&#xA;	&#xA;&#xA;&#xA;	Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;	' Expand environment variables&#xA;	baseFolder = ws.ExpandEnvironmentStrings(baseFolder)&#xA;	java32Path = ws.ExpandEnvironmentStrings(&quot;%JDK32_HOME%bin&quot;)&#xA;	&#xA;	&#xA;    ' Set environment variable	&#xA;    Set objEnv = ws.Environment (&quot;PROCESS&quot;)&#xA;    objEnv(&quot;PATH&quot;) = objEnv(&quot;PATH&quot;) &amp; &quot;;&quot; &amp; baseFolder&#xA;	&#xA;	' Set current folder&#xA;	ws.CurrentDirectory = baseFolder&#xA;&#xA;    ' Set path environment variable for 32 bit Java	&#xA;    objEnv(&quot;PATH&quot;) = java32Path &amp; &quot;;&quot; &amp; objEnv(&quot;PATH&quot;) &#xA;&#xA;    Set ws = CreateObject(&quot;WScript.Shell&quot;)&#xA;    command = &quot;java -cp &quot;&quot;eaapi.jar;.;&quot;&quot; &quot; &amp; eaClass &amp; &quot; &quot; &amp; param1 &amp; &quot; &quot; &amp;param2 &amp; &quot; &quot; &amp; param3 &amp; &quot; &quot; &amp; param4 &amp; &quot; &quot; &#xA;	&#xA;    On Error Resume Next&#xA;    Set wsShellExe = ws.Exec(command)&#xA;	If Err.Number &lt;&gt; 0 Then&#xA;	  MsgBox &quot;Command:'&quot;  &amp; vbCRLF &amp; command &amp; _&#xA;     	  &quot;'&quot; &amp; vbCRLF &amp; &quot;Error:&quot; &amp; Err.Number &amp; _&#xA;		  vbCRLF &amp; &quot;Source:&quot; &amp; Err.Source &amp; _&#xA;		  vbCRLF &amp; &quot;Description:&quot; &amp; Err.Description, _&#xA;		  65, _&#xA;		  &quot;Error running command&quot;&#xA;		  &#xA;	  Session.Output &quot;JavaPath='&quot; &amp; java32Path &amp; &quot;'&quot;&#xA;	  Session.Output &quot;Classes='&quot; &amp; baseFolder &amp; &quot;'&quot;&#xA;	  Session.Output &quot; &quot;&#xA;	  return&#xA;	End If&#xA;	On Error Goto 0&#xA;&#xA;&#xA;    if IsObject(wsShellExe) Then&#xA;		stdErr = wsShellExe.StdErr.ReadAll&#xA;		&#xA;		Select Case wsShellExe.Status&#xA;		  Case WshFinished&#xA;			 'Session.Output &quot;WshFinished&quot;&#xA;			 stdOut = wsShellExe.StdOut.ReadAll&#xA;		  Case WshFailed&#xA;			 'strOutput = wsShellExe.StdErr.ReadAll&#xA;			 Session.Output &quot;WshEnd&quot;&#xA;		  Case Else&#xA;			 'Session.Output &quot;Error&quot;&#xA;			 stdOut = &quot;Undefined Error!&quot;&#xA;		End Select&#xA;	End If&#xA;    RunJava = stdOut &#xA; End Function&#xA;&#xA;'-----------------------------------------------------------&#xA;' Test      Execute C# EA HyperScripting from EA Script GUI&#xA;' TestJava  Execute Java EA HyperScripting from EA Script GUI&#xA;'&#xA;' To use or not use this test functionality remove/insert beneath apostrophe before 'Test' or 'TestJava'&#xA;'&#xA;'Test&#xA;'TestJava"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8853B706-2FA8-4aaf-9620-C4A4E6557FDD}"/>
			<Column name="ScriptAuthor" value="{F3EBA18B-9046-4b28-A76A-7DF1C23CEA63}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;RunCommandVbTest&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name: TraversePackage&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	' Get the type of element selected in the Project Browser&#xA;	dim treeSelectedType&#xA;	treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;	&#xA;	' Handling Code: Uncomment any types you wish this script to support&#xA;	' NOTE: You can toggle comments on multiple lines that are currently&#xA;	' selected with [CTRL]+[SHIFT]+[C].&#xA;	select case treeSelectedType&#xA;	&#xA;'		case otElement&#xA;'			' Code for when an element is selected&#xA;'			dim theElement as EA.Element&#xA;'			set theElement = Repository.GetTreeSelectedObject()&#xA;'					&#xA;		case otPackage&#xA;			' Code for when a package is selected&#xA;	        ' Run the CSharp script&#xA;		    ' Command: &quot;ListDiagramElements&quot;&#xA;		    ' Par1:    Package GUID&#xA;			dim thePackage as EA.Package&#xA;			set thePackage = Repository.GetTreeSelectedObject()&#xA;			runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TraversePackage&quot;, thePackage.PackageGUID, &quot;&quot;&#xA;			&#xA;'			&#xA;'		case otDiagram&#xA;'			' Code for when a diagram is selected&#xA;'			dim theDiagram as EA.Diagram&#xA;'			set theDiagram = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otAttribute&#xA;'			' Code for when an attribute is selected&#xA;'			dim theAttribute as EA.Attribute&#xA;'			set theAttribute = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otMethod&#xA;'			' Code for when a method is selected&#xA;'			dim theMethod as EA.Method&#xA;'			set theMethod = Repository.GetTreeSelectedObject()&#xA;		&#xA;		case else&#xA;			' Error message&#xA;			Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;			&#xA;	end select&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{C67BBA63-8B2B-4f08-819D-3DF7298C3097}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetBrowser"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{EC1418B2-432A-43e9-A047-12F30DD09BAB}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;DIAGRAM&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetDiagram"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{433BDA91-7F89-41f3-87B3-AA4098690715}"/>
			<Column name="ScriptAuthor" value="{C67BBA63-8B2B-4f08-819D-3DF7298C3097}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TraversePackage&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' This code has been included from the default Project Browser template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name: TraversePackage&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;'&#xA;' Project Browser Script main function&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	' Get the type of element selected in the Project Browser&#xA;	dim treeSelectedType&#xA;	treeSelectedType = Repository.GetTreeSelectedItemType()&#xA;	&#xA;	' Handling Code: Uncomment any types you wish this script to support&#xA;	' NOTE: You can toggle comments on multiple lines that are currently&#xA;	' selected with [CTRL]+[SHIFT]+[C].&#xA;	select case treeSelectedType&#xA;	&#xA;'		case otElement&#xA;'			' Code for when an element is selected&#xA;'			dim theElement as EA.Element&#xA;'			set theElement = Repository.GetTreeSelectedObject()&#xA;'					&#xA;		case otPackage&#xA;			' Code for when a package is selected&#xA;	        ' Run the CSharp script&#xA;		    ' Command: &quot;ListDiagramElements&quot;&#xA;		    ' Par1:    Package GUID&#xA;			dim thePackage as EA.Package&#xA;			set thePackage = Repository.GetTreeSelectedObject()&#xA;			runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TraversePackage&quot;, thePackage.PackageGUID, &quot;&quot;&#xA;			&#xA;'			&#xA;'		case otDiagram&#xA;'			' Code for when a diagram is selected&#xA;'			dim theDiagram as EA.Diagram&#xA;'			set theDiagram = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otAttribute&#xA;'			' Code for when an attribute is selected&#xA;'			dim theAttribute as EA.Attribute&#xA;'			set theAttribute = Repository.GetTreeSelectedObject()&#xA;'			&#xA;'		case otMethod&#xA;'			' Code for when a method is selected&#xA;'			dim theMethod as EA.Method&#xA;'			set theMethod = Repository.GetTreeSelectedObject()&#xA;		&#xA;		case else&#xA;			' Error message&#xA;			Session.Prompt &quot;This script does not support items of this type.&quot;, promptOK&#xA;			&#xA;	end select&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{55BD0E3B-6543-485f-AD3D-2A191E33B3C9}"/>
			<Column name="ScriptAuthor" value="{EC1418B2-432A-43e9-A047-12F30DD09BAB}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ListDiagramElements&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' This code has been included from the default Diagram Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.&#xA;'&#xA;' Script Name: ListDiagramElements&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;&#xA;'&#xA;' Diagram Script main function&#xA;'&#xA;sub OnDiagramScript()&#xA;&#xA;	' Get a reference to the current diagram&#xA;	dim currentDiagram as EA.Diagram&#xA;	set currentDiagram = Repository.GetCurrentDiagram()&#xA;	&#xA;	if not currentDiagram is nothing then &#xA;	    ' Run the CSharp script&#xA;		' Command: &quot;ListDiagramElements&quot;&#xA;		' Par1:    Diagram GUID&#xA;		runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;ListDiagramElements&quot;, currentDiagram.DiagramGUID, &quot; &quot;&#xA;&#xA;	&#xA;		' Get a reference to any selected connector/objects&#xA;		dim selectedConnector as EA.Connector&#xA;		dim selectedObjects as EA.Collection&#xA;		set selectedConnector = currentDiagram.SelectedConnector&#xA;		set selectedObjects = currentDiagram.SelectedObjects&#xA;&#xA;		if not selectedConnector is nothing then&#xA;			' A connector is selected&#xA;		elseif selectedObjects.Count &gt; 0 then&#xA;			' One or more diagram objects are selected&#xA;		else&#xA;			' Nothing is selected&#xA;		end if&#xA;	else&#xA;		Session.Prompt &quot;This script requires a diagram to be visible&quot;, promptOK&#xA;	end if&#xA;&#xA;end sub&#xA;&#xA;OnDiagramScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="17"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{36191E54-AF6F-46d4-B20A-AA90637F7E4C}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;MODELSEARCH&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetModelSearch"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="18"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{7070F638-53A6-43db-8D98-2C424030747F}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;SEARCH&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetProjectSearch"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="19"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{B04B7335-F64E-4e18-A7DA-CE2EABDDAE3E}"/>
			<Column name="ScriptAuthor" value="{7070F638-53A6-43db-8D98-2C424030747F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ProjectSearchScript&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Include CSharp script interface&#xA;!INC ScriptDotNet.RunCommandVb &#xA;&#xA;'&#xA;' This code has been included from the default Search Script template.&#xA;' If you wish to modify this template, it is located in the Config\Script Templates&#xA;' directory of your EA install path.   &#xA;'&#xA;' Script Name: projectSearchScript&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;&#xA;' TODO 1: Define your search specification:&#xA;' The columns that will apear in the Model Search window&#xA;dim SEARCH_SPECIFICATION &#xA;SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; &amp;_&#xA;							&quot;&lt;Fields&gt;&quot; &amp;_&#xA;								&quot;&lt;Field name=&quot;&quot;CLASSGUID&quot;&quot;/&gt;&quot; &amp;_&#xA;								&quot;&lt;Field name=&quot;&quot;CLASSTYPE&quot;&quot; /&gt;&quot; &amp;_&#xA;								&quot;&lt;Field name=&quot;&quot;Element Name&quot;&quot; /&gt;&quot; &amp;_&#xA;								&quot;&lt;Field name=&quot;&quot;Comments&quot;&quot; /&gt;&quot; &amp;_&#xA;							&quot;&lt;/Fields&gt;&quot; &amp;_&#xA;							&quot;&lt;Rows/&gt;&quot; &amp;_&#xA;						&quot;&lt;/ReportViewData&gt;&quot;&#xA;&#xA;'&#xA;' Search Script main function&#xA;' &#xA;sub OnSearchScript()&#xA;&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;,&quot;ProjectSearch&quot;,&quot;&quot;,&quot;&quot;&#xA;end sub	&#xA;&#xA;'&#xA;' TODO 3: Modify this function signature to include all information required for the search&#xA;' results. Entire objects (such as elements, attributes, operations etc) may be passed in.&#xA;'&#xA;' Adds an entry to the xml row node 'rowsNode'&#xA;'&#xA;sub AddRow( xmlDOM, rowsNode, elementGUID, elementName, comments )&#xA;&#xA;	' Create a Row node&#xA;	dim row&#xA;	set row = xmlDOM.createElement( &quot;Row&quot; )&#xA;	&#xA;	' Add the Model Search row data to the DOM&#xA;	AddField xmlDOM, row, &quot;CLASSGUID&quot;, elementGUID&#xA;	AddField xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;Class&quot;&#xA;	AddField xmlDOM, row, &quot;Name&quot;, elementName&#xA;	AddField xmlDOM, row, &quot;Comments&quot;, comments&#xA;	&#xA;	' Append the newly created row node to the rows node&#xA;	rowsNode.appendChild( row )&#xA;&#xA;end sub&#xA;&#xA;'&#xA;' Adds an Element to the DOM called Field which makes up the Row data for the Model Search window.&#xA;' &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA;'&#xA;sub AddField( xmlDOM, row, name, value )&#xA;&#xA;	dim fieldNode&#xA;	set fieldNode = xmlDOM.createElement( &quot;Field&quot; )&#xA;	&#xA;	' Create first attribute for the name&#xA;	dim nameAttribute&#xA;	set nameAttribute = xmlDOM.createAttribute( &quot;name&quot; )&#xA;	nameAttribute.value = name&#xA;	fieldNode.attributes.setNamedItem( nameAttribute )&#xA;	&#xA;	' Create second attribute for the value&#xA;	dim valueAttribute &#xA;	set valueAttribute = xmlDOM.createAttribute( &quot;value&quot; )&#xA;	valueAttribute.value = value&#xA;	fieldNode.attributes.setNamedItem( valueAttribute )&#xA;	&#xA;	' Append the fieldNode&#xA;	row.appendChild( fieldNode )&#xA;&#xA;end sub&#xA;&#xA;OnSearchScript()&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="26"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="27"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="21"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D155EAC6-1E0F-4dde-8ED2-58CBBC487EBD}"/>
			<Column name="ScriptAuthor" value="{36191E54-AF6F-46d4-B20A-AA90637F7E4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ModelSearch&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Include CSharp script interface&#xA;!INC ScriptDotNet.RunCommandVb &#xA;&#xA;'&#xA;' Script Name: ModelSearch&#xA;' Author:      Helmut Ortmann&#xA;' Purpose:     Show how to run C# Console Program from EA VB Script&#xA;' Date:        26. December 2018&#xA;' See: https://github.com/Helmut-Ortmann/EnterpriseArchitect_ScriptDotNet&#xA;'&#xA;sub main&#xA;    ' Do everything in C#&#xA;	' The context object contains the selected line of the ModelSearch Window&#xA;	' Note: Search has to set CLASSGUID, CLASSTYPE&#xA;	'       The symbol on the elft shows you that EA has identified the &#xA;    runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;ModelSearch&quot;, &quot;&quot;, &quot;&quot;&#xA;	&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="22"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="23"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="24"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="25"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="28"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="29"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="30"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{B6D6E7D8-FD6A-45d0-91F2-B4771A54A161}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="ScriptDotNetNormal"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="31"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{186501D2-1E43-4c45-988E-20C5D9440101}"/>
			<Column name="ScriptAuthor" value="{B6D6E7D8-FD6A-45d0-91F2-B4771A54A161}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;LinqForSqlQuery&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Include ScriptDotNet&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;sub main&#xA;    ' C# makes everything&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharpLinq.exe&quot;, &quot;LinqForSql&quot;, &quot;&quot;, &quot;&quot;&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="32"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1D26011D-8CB7-4232-B3D7-D119F4CF1D02}"/>
			<Column name="ScriptAuthor" value="{7070F638-53A6-43db-8D98-2C424030747F}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ProjectSearchLinq&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Include ScriptDotNet&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;sub main&#xA;    ' C# makes everything&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharpLinq.exe&quot;, &quot;LinqForSql&quot;, &quot;&quot;, &quot;&quot;&#xA;end sub&#xA;&#xA;main&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="33"/>
			<Column name="ScriptCategory" value="EACompileScript"/>
			<Column name="ScriptName" value="Repository Interface C# 4.0"/>
			<Column name="ScriptAuthor" value="{14247238-C1B4-4f63-A1A7-7A58BB439462}"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Flags value=&quot;0&quot;/&gt;&lt;BuildCmdType value=&quot;Batch File&quot;/&gt;&lt;BuildDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;InitialDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;BuildParser value=&quot;Microsoft .NET&quot;/&gt;&lt;OutputParser value=&quot;Microsoft .NET&quot;/&gt;&lt;BuildDepends value=&quot;false&quot;/&gt;&lt;CleanCmdType value=&quot;Batch File&quot;/&gt;&lt;Clean value=&quot;del /F ConsoleApplication.exe&quot;/&gt;&lt;CleanDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;CleanParser value=&quot;Microsoft .NET&quot;/&gt;&lt;CleanDepends value=&quot;false&quot;/&gt;&lt;RunCmdType value=&quot;Batch File&quot;/&gt;&lt;Run value=&quot;ConsoleApplication.exe #PID#&amp;#xA;pause&quot;/&gt;&lt;RunCommand value=&quot;ConsoleApplication.exe #PID#&amp;#xA;pause&quot;/&gt;&lt;RunDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;RunParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;RunDepends value=&quot;false&quot;/&gt;&lt;Debugger value=&quot;Microsoft .NET&quot;/&gt;&lt;DebugDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;Attach value=&quot;false&quot;/&gt;&lt;Debug value=&quot;ConsoleApplication.exe #PID#&quot;/&gt;&lt;DebugClass value=&quot;ConsoleApplication.exe #PID#&quot;/&gt;&lt;ShowConsole value=&quot;true&quot;/&gt;&lt;DebugDepends value=&quot;true&quot;/&gt;&lt;Diagnostics value=&quot;false&quot;/&gt;&lt;Symbols value=&quot;&quot;/&gt;&lt;BuildremHost value=&quot;&quot;/&gt;&lt;CleanremHost value=&quot;&quot;/&gt;&lt;TestCmdType value=&quot;Batch File&quot;/&gt;&lt;Test value=&quot;ConsoleApplication.exe #PID#&amp;#xA;pause&quot;/&gt;&lt;TestRunCommand value=&quot;ConsoleApplication.exe #PID#&amp;#xA;pause&quot;/&gt;&lt;TestDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;TestParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;TestOutputParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;TestDepends value=&quot;false&quot;/&gt;&lt;TestremHost value=&quot;&quot;/&gt;&lt;DeployCmdType value=&quot;Batch File&quot;/&gt;&lt;Deploy value=&quot;copy &amp;quot;C:\Program Files (x86)\Sparx Systems\EA\SparxSystems.Repository.dll&amp;quot;  .\SparxSystems.Repository.dll&amp;#xA;copy &amp;quot;C:\Program Files (x86)\Sparx Systems\EA\Interop.EA.dll&amp;quot;  .\Interop.EA.dll&quot;/&gt;&lt;DeployCommand value=&quot;copy &amp;quot;C:\Program Files (x86)\Sparx Systems\EA\SparxSystems.Repository.dll&amp;quot;  .\SparxSystems.Repository.dll&amp;#xA;copy &amp;quot;C:\Program Files (x86)\Sparx Systems\EA\Interop.EA.dll&amp;quot;  .\Interop.EA.dll&quot;/&gt;&lt;DeployDir value=&quot;c:\Temp\HybridScripting\CSharp\RepositoryInterface 4.0&quot;/&gt;&lt;DeployParser value=&quot;Microsoft .NET&quot;/&gt;&lt;DeployDepends value=&quot;false&quot;/&gt;&lt;DeployremHost value=&quot;&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value="&quot;C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe&quot; /debug /target:exe /platform:x86 /r:SparxSystems.Repository.dll /r:Interop.EA.dll  /lib:&quot;C:\Program Files (x86)\Sparx Systems\EA&quot; ConsoleApplication.cs&#xA;copy &quot;C:\Program Files (x86)\Sparx Systems\EA\SparxSystems.Repository.dll&quot;  .\SparxSystems.Repository.dll&#xA;copy &quot;C:\Program Files (x86)\Sparx Systems\EA\Interop.EA.dll&quot;  .\Interop.EA.dll&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="34"/>
			<Column name="ScriptCategory" value="EACompileScript"/>
			<Column name="ScriptName" value="Repository Interface"/>
			<Column name="ScriptAuthor" value="{F8DAD0C4-9887-4cc7-8DB6-DF6BCE95F812}"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;SimPlatform value=&quot;UML Basic&quot;/&gt;&lt;SimEngine value=&quot;JavaScript&quot;/&gt;&lt;BuildCmdType value=&quot;Batch File&quot;/&gt;&lt;BuildDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;InitialDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;BuildParser value=&quot;Java SDK&quot;/&gt;&lt;OutputParser value=&quot;Java SDK&quot;/&gt;&lt;BuildDepends value=&quot;false&quot;/&gt;&lt;BuildremHost value=&quot;&quot;/&gt;&lt;CleanCmdType value=&quot;Batch File&quot;/&gt;&lt;Clean value=&quot;del RepositoryInterface.class&quot;/&gt;&lt;CleanDir value=&quot;c:\Temp\HybridScripting\Java\SparxSystems&quot;/&gt;&lt;CleanParser value=&quot;Java SDK&quot;/&gt;&lt;CleanDepends value=&quot;false&quot;/&gt;&lt;CleanremHost value=&quot;&quot;/&gt;&lt;TestCmdType value=&quot;Batch File&quot;/&gt;&lt;Test value=&quot;echo on&amp;#xA;set PATH=%PATH%;c:\Temp\HybridScripting\Java&amp;#xA;set&amp;#xA;java -cp &amp;quot;eaapi.jar;.;&amp;quot; SparxSystems.RepositoryInterface #PID#&amp;#xA;pause&quot;/&gt;&lt;TestRunCommand value=&quot;echo on&amp;#xA;set PATH=%PATH%;c:\Temp\HybridScripting\Java&amp;#xA;set&amp;#xA;java -cp &amp;quot;eaapi.jar;.;&amp;quot; SparxSystems.RepositoryInterface #PID#&amp;#xA;pause&quot;/&gt;&lt;TestDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;TestParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;TestOutputParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;TestDepends value=&quot;false&quot;/&gt;&lt;TestremHost value=&quot;&quot;/&gt;&lt;RunCmdType value=&quot;Batch File&quot;/&gt;&lt;Run value=&quot;echo on&amp;#xA;set PATH=%PATH%;c:\Temp\HybridScripting\Java&amp;#xA;set&amp;#xA;java -cp &amp;quot;eaapi.jar;.;&amp;quot; SparxSystems.RepositoryInterface #PID#&amp;#xA;pause&quot;/&gt;&lt;RunCommand value=&quot;echo on&amp;#xA;set PATH=%PATH%;c:\Temp\HybridScripting\Java&amp;#xA;set&amp;#xA;java -cp &amp;quot;eaapi.jar;.;&amp;quot; SparxSystems.RepositoryInterface #PID#&amp;#xA;pause&quot;/&gt;&lt;RunDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;RunParser value=&quot;&amp;lt;none&amp;gt;&quot;/&gt;&lt;RunDepends value=&quot;false&quot;/&gt;&lt;DeployCmdType value=&quot;Batch File&quot;/&gt;&lt;Deploy value=&quot;set EADIR=C:\Program Files (x86)\Sparx Systems\EA\Java API&amp;#xA;set JNI=%EADIR%\SSJavaCOM.dll&amp;#xA;set JAR=%EADIR%\eaapi.jar&amp;#xA;set DEST=c:\Temp\HybridScripting\Java&amp;#xA;IF NOT EXIST &amp;quot;SSJavaCOM.dll&amp;quot; copy &amp;quot;%JNI%&amp;quot; &amp;quot;%DEST%\*&amp;quot;&amp;#xA;if NOT EXIST &amp;quot;eaapi.jar&amp;quot; copy &amp;quot;%JAR%&amp;quot; &amp;quot;%DEST%\*&amp;quot;&quot;/&gt;&lt;DeployCommand value=&quot;set EADIR=C:\Program Files (x86)\Sparx Systems\EA\Java API&amp;#xA;set JNI=%EADIR%\SSJavaCOM.dll&amp;#xA;set JAR=%EADIR%\eaapi.jar&amp;#xA;set DEST=c:\Temp\HybridScripting\Java&amp;#xA;IF NOT EXIST &amp;quot;SSJavaCOM.dll&amp;quot; copy &amp;quot;%JNI%&amp;quot; &amp;quot;%DEST%\*&amp;quot;&amp;#xA;if NOT EXIST &amp;quot;eaapi.jar&amp;quot; copy &amp;quot;%JAR%&amp;quot; &amp;quot;%DEST%\*&amp;quot;&quot;/&gt;&lt;DeployDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;DeployParser value=&quot;Java SDK&quot;/&gt;&lt;DeployDepends value=&quot;false&quot;/&gt;&lt;DeployremHost value=&quot;&quot;/&gt;&lt;Debugger value=&quot;Java&quot;/&gt;&lt;DebugDir value=&quot;c:\Temp\HybridScripting\Java&quot;/&gt;&lt;Attach value=&quot;false&quot;/&gt;&lt;Debug value=&quot;SparxSystems.RepositoryInterface #PID#&quot;/&gt;&lt;DebugClass value=&quot;SparxSystems.RepositoryInterface #PID#&quot;/&gt;&lt;ShowConsole value=&quot;false&quot;/&gt;&lt;DebugDepends value=&quot;false&quot;/&gt;&lt;Diagnostics value=&quot;false&quot;/&gt;&lt;Flags value=&quot;0&quot;/&gt;&lt;Vars value=&quot;jre=%JAVA%,-Djava.class.path=&amp;quot;c:\Temp\HybridScripting\Java;.\eaapi.jar;&amp;quot;&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value="set EADIR=C:\Program Files (x86)\Sparx Systems\EA\Java API&#xA;set JNI=%EADIR%\SSJavaCOM.dll&#xA;set JAR=%EADIR%\eaapi.jar&#xA;set DEST=c:\Temp\HybridScripting\Java&#xA;IF NOT EXIST &quot;SSJavaCOM.dll&quot; copy &quot;%JNI%&quot; &quot;%DEST%\*&quot;&#xA;if NOT EXIST &quot;eaapi.jar&quot; copy &quot;%JAR%&quot; &quot;%DEST%\*&quot;&#xA;javac -g  -cp &quot;eaapi.jar;.;&quot; sparxsystems\*.java"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="35"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4373BD1F-2804-4503-BCDA-725EF2B36AB2}"/>
			<Column name="ScriptAuthor" value="{B6D6E7D8-FD6A-45d0-91F2-B4771A54A161}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;Java&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;' Include CSharp/Java script interface&#xA;!INC ScriptDotNet.RunCommandVb &#xA;&#xA;'&#xA;' Script Name: &#xA;' Author: &#xA;' Purpose: &#xA;' Date: &#xA;'&#xA;sub main&#xA;    dim result&#xA;	result = RunCommandJava(&quot;%EA_SCRIPT_HOME%&quot;, &quot;SparxSystems.RepositoryInterface&quot;, &quot; &quot;, &quot; &quot;,&quot; &quot;, &quot; &quot;)&#xA;end sub&#xA;&#xA;main"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="36"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="37"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="38"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="39"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="40"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="41"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="42"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="43"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="44"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="45"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="46"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C17F6D7F-F60A-4880-8D36-B903A06F38EA}"/>
			<Column name="ScriptAuthor" value="{C67BBA63-8B2B-4f08-819D-3DF7298C3097}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TextToSpeach&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' Read the selected element aloud.&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TextToSpeechItem&quot;, &quot;&quot;, &quot;&quot;&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="47"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{34E35E8A-84AB-4892-8DDB-90FB001990F3}"/>
			<Column name="ScriptAuthor" value="{EC1418B2-432A-43e9-A047-12F30DD09BAB}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TextToSpeech&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' Read the selected element aloud.&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TextToSpeechItem&quot;, &quot;&quot;, &quot;&quot;&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="48"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{266568B6-064F-434d-B355-C5157E931029}"/>
			<Column name="ScriptAuthor" value="{36191E54-AF6F-46d4-B20A-AA90637F7E4C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;TextToSpeech&quot; Type=&quot;Internal&quot; Language=&quot;VBScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="option explicit&#xA;&#xA;!INC Local Scripts.EAConstants-VBScript&#xA;!INC ScriptDotNet.RunCommandVb&#xA;&#xA;'&#xA;' Read the selected element aloud.&#xA;'&#xA;sub OnProjectBrowserScript()&#xA;	&#xA;	runCommand &quot;%EA_SCRIPT_HOME%ScriptCSharp.exe&quot;, &quot;TextToSpeechItem&quot;, &quot;&quot;, &quot;&quot;&#xA;	&#xA;end sub&#xA;&#xA;OnProjectBrowserScript&#xA;"/>
		</DataRow>
	</DataSet>
</RefData>
